# Optionally copy this file to `.cargo/config.toml` and edit the settings below as desired.

# [patch.crates-io]
# simd-r-drive = { path = "../rust-simd-r-drive" }
# simd-r-drive-entry-handle = { path = "../rust-simd-r-drive/simd-r-drive-entry-handle" }

# NOTE: sccache (optional)
# The `rustc-wrapper` below points Cargo to `sccache`, a local compiler cache that
# can significantly speed up incremental builds by caching compiler outputs.
# This is entirely optional â€” builds will work without it. Keep this file as-is
# if you want to use `sccache`, or remove/comment the `rustc-wrapper` entry to
# use the system rustc directly.
#
# Quick start (local development):
# 1) Install sccache (one-time):
#      cargo install sccache
#    or use your platform package manager if available.
#
# 2) Configure your shell (optional convenience):
#      export RUSTC_WRAPPER="$(which sccache)"
#    This tells Cargo to use the sccache binary for all rustc invocations.
#
# 3) Start sccache server (recommended for best perf):
#      sccache --start-server
#    On macOS/Linux you can run this in background or start it from a launch/service
#    manager for long-lived caching.
#
# 4) Build your project as normal:
#      cargo build
#
# Notes & caveats:
# - Optional: You can simply rely on the per-project `rustc-wrapper` setting below
#   instead of exporting RUSTC_WRAPPER in your shell. Leaving the `rustc-wrapper`
#   line active means anyone cloning the repo will use `sccache` if it's installed.
# - To disable sccache temporarily, either remove/comment the `rustc-wrapper`
#   line in this file or unset `RUSTC_WRAPPER` in your environment.
# - CI: Some CI systems already provide a shared `sccache` service or require
#   explicit setup. If you enable `sccache` in CI, consider configuring a
#   persistent cache directory or server so the cache survives between runs.
# - Security: `sccache` caches compiler outputs on disk. Treat the cache as
#   build artefacts and avoid storing secrets in build outputs. If you have
#   strict security requirements, you may choose not to enable sccache.
# - Diagnostics: If you see odd compiler behavior when sccache is enabled,
#   try reproducing the issue with sccache disabled to rule out cache-related
#   interference.
#
# Useful commands:
#  - Show sccache stats: `sccache --show-stats`
#  - Clear cache: `sccache --clear`
#  - Stop server: `sccache --stop-server`
#
# Keep the `rustc-wrapper` setting below enabled only if you want sccache to be
# the default for all contributors who have it installed. Otherwise, comment
# it out to avoid surprising behavior for people who don't have sccache.

[build]
# Optional compiler wrapper for sccache. Comment out to disable.
# rustc-wrapper = "sccache"
