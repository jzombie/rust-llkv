name: rust-tests

on:
  push:
    branches: [main, dev]
    tags: ["v*"]
  pull_request:
    branches: [main, dev]

# Ensure only one run per branch/PR at a time. If new commits are pushed,
# older jobs will be automatically canceled.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test_self_hosted:
    name: test (self-hosted)
    runs-on: [self-hosted, macOS, ARM64]

    env:
      # Use a workspace-local CARGO_HOME to avoid writing into the runner's
      # $HOME/.cargo. This keeps installs and registry/git cache inside the
      # repository workspace (useful for self-hosted runners).
      CARGO_HOME: "${{ github.workspace }}/.cargo"
      # Use a persistent target directory OUTSIDE the workspace to survive runner cleanup
      CARGO_TARGET_DIR: /tmp/llkv-bench-target

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Test
        run: cargo test --workspace --all-features --verbose --lib --bins --tests --examples -- --include-ignored

  # test:
  #   name: test
  #   runs-on: ubuntu-latest
  #   needs: test_matrix
  #   if: ${{ always() }}
  #   steps:
  #     - name: Evaluate matrix results
  #       run: |
  #         result="${{ needs.test_matrix.result }}"
  #         echo "Matrix job concluded with: ${result}"
  #         if [ "${result}" != "success" ]; then
  #           exit 1
  #         fi
  #         echo "All platform combinations succeeded."
# TODO: Implement
# Runs the Miri interpreter across all OS targets to detect undefined behavior in unsafe code
#   miri:
#     name: Miri (OS=${{ matrix.os }})
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Install nightly toolchain with Miri
#         uses: dtolnay/rust-toolchain@nightly
#         with:
#           components: miri

# TODO: To effectively use this a custom test-only, Miri-friendly pager may need to be created
# and feature gated to only use `EntryHandle` (mmap-backed). This should be modified to test
# integration tests as well, not only `--lib` tests.
#   - name: Run Miri tests
#     # Miri cannot emulate the OS-backed mmap calls used by our integration tests, so
#     # we limit the run to library tests (unit tests) for now.
#     run: cargo miri test -p llkv-column-map --lib
