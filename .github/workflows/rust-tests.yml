name: rust-tests

on:
  push:
    branches: [main, dev]
    tags: ["v*"]
  pull_request:
    branches: [main, dev]

jobs:
  test:
    name: Test (OS=${{ matrix.os }}, Features=${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    env:
      SCCACHE_DIR: "${{ github.workspace }}/.sccache"
      SCCACHE_CACHE_SIZE: "5G"
      RUSTC_WRAPPER: sccache
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - name: "All Features"
            flags: "--all-features"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Added caching step to speed up dependency builds.
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.flags }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-

      - name: Ensure sccache directory
        shell: bash
        run: mkdir -p "$SCCACHE_DIR"

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Build
        run: cargo build --workspace --all-targets ${{ matrix.flags }}

      - name: Test
        # run: cargo test --workspace --all-targets --verbose ${{ matrix.flags }} -- --include-ignored
        # Explicitly ignore benches (workaround for CodSpeed benches running for default)
        run: cargo test --workspace --all-features --verbose --lib --bins --tests --examples -- --include-ignored

      - name: Display sccache stats
        if: always()
        shell: bash
        run: |
          echo "=== sccache statistics ==="
          sccache --show-stats

# TODO: Implement
# Runs the Miri interpreter across all OS targets to detect undefined behavior in unsafe code
#   miri:
#     name: Miri (OS=${{ matrix.os }})
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Install nightly toolchain with Miri
#         uses: dtolnay/rust-toolchain@nightly
#         with:
#           components: miri

# TODO: To effectively use this a custom test-only, Miri-friendly pager may need to be created
# and feature gated to only use `EntryHandle` (mmap-backed). This should be modified to test
# integration tests as well, not only `--lib` tests.
#   - name: Run Miri tests
#     # Miri cannot emulate the OS-backed mmap calls used by our integration tests, so
#     # we limit the run to library tests (unit tests) for now.
#     run: cargo miri test -p llkv-column-map --lib
