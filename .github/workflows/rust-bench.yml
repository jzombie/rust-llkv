name: CodSpeed
name: CodSpeed

on:
  push:
    branches:
      - "main" # or "master"
  pull_request: # required to have reports on PRs
  workflow_dispatch:

jobs:
  codspeed:
    name: Run benchmarks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup rust toolchain, cache and cargo-codspeed
        uses: moonrepo/setup-rust@v0
        with:
          channel: stable
          cache-target: release
          bins: cargo-codspeed

      - name: Clone and build custom codspeed-runner
        run: |
          set -euo pipefail
          REPO_URL="https://github.com/jzombie/codspeed-runner.git"
          BRANCH="feature/prototype-macos-support"
          DEST_DIR="codspeed-runner-src"
          rm -rf "${DEST_DIR}" || true
          git clone --depth 1 --branch "${BRANCH}" "${REPO_URL}" "${DEST_DIR}"
          cargo install --path "${DEST_DIR}" --root "$HOME/.local" --force
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          codspeed --version || true

      - name: Build the benchmark target(s)
        run: cargo codspeed build

      - name: Run the benchmarks
        env:
          CODSPEED_TOKEN: ${{ secrets.CODSPEED_TOKEN }}
        run: |
          set -euo pipefail
          codspeed run --mode=instrumentation --token "${CODSPEED_TOKEN:-}" -- 'cargo codspeed run'
                if git clone --verbose --branch "${BRANCH}" "${REPO_URL}" "${DEST_DIR}"; then
                  success=1
                  echo "Full clone succeeded"
                  break
                else
                  echo "Full clone failed"
                  rm -rf "${DEST_DIR}" || true
                fi
              fi
            fi
            sleep 2
          done

          if [ ${success} -ne 1 ]; then
            echo "Failed to clone ${BRANCH} after ${max_attempts} attempts"
            exit 1
          fi

          # Diagnostics: list cloned files and verify installer presence explicitly
          echo "--- Contents of ${DEST_DIR} ---"
          ls -la "${DEST_DIR}" || true
          echo "--- Checking for installer script ---"
          if [ -f "${DEST_DIR}/scripts/simple-installer.sh" ]; then
            echo "Installer found: ${DEST_DIR}/scripts/simple-installer.sh"
          else
            echo "ERROR: installer script missing at ${DEST_DIR}/scripts/simple-installer.sh"
            echo "Listing ${DEST_DIR}/scripts:" || true
            ls -la "${DEST_DIR}/scripts" || true
            exit 1
          fi

      # Build and install codspeed from the cloned fork (no installer, no fallback)
      - name: Build and install codspeed from source
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"

          # Build and install the codspeed binary from the cloned fork. This
          # ensures we use the fork's code directly and avoids running any
          # installer scripts.
          export CARGO_TERM_COLOR=always
          cargo install --path codspeed-runner-src --root "$HOME/.local" --force

          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          which codspeed
          codspeed --version

      - name: Build the benchmark target(s) (single build, shared target dir)
        run: |
          set -euo pipefail
          echo "Build step PWD: $(pwd)"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE:-<unset>}"
          # Ensure cargo and codspeed place artifacts in the same target dir
          export CARGO_TARGET_DIR="${GITHUB_WORKSPACE}/target"
          echo "CARGO_TARGET_DIR=$CARGO_TARGET_DIR"

          # Require codspeed to be present. We install it earlier in the job from
          # the cloned fork; if it's missing, fail early to avoid flaky fallbacks.
          if ! command -v codspeed >/dev/null 2>&1; then
            echo "ERROR: codspeed binary not found in PATH. Expected it to be installed at $HOME/.local/bin by earlier step."
            echo "Please check the Build and install codspeed from source step output above for failures."
            exit 1
          fi

          echo "Running: cargo codspeed build --workspace --profile bench"
          cargo codspeed build --workspace --profile bench

          echo "Listing target directory after build:"
          ls -la "$CARGO_TARGET_DIR" || true

      - name: Run the benchmarks (diagnostics + instrumentation)
        env:
          CODSPEED_TOKEN: ${{ secrets.CODSPEED_TOKEN }}
          CODSPEED_LOG: debug
          # Disable perf/system-level instrumentation to avoid sudo prompts
          CODSPEED_PERF_ENABLED: "false"
        run: |
          set -euo pipefail

          echo "=== Preflight diagnostics ==="
          echo "uname:"; uname -a
          echo "arch:"; arch || true
          echo "which sh:"; which sh || true
          echo "file /bin/sh:"; file /bin/sh || true

          echo "--- Rust/cargo versions ---"
          rustc --version || true
          cargo --version || true

          echo "--- Workspace target/ listings ---"
          if [ -d target ]; then
            find target -maxdepth 3 -type f -executable -print -exec file {} \; || true
          else
            echo "No target dir yet"
          fi

          echo "=== Running codspeed (instrumentation mode) ==="
          echo "PWD: $(pwd)"
          echo "Listing current directory:"; ls -la
          echo "Listing target directory (if present):"; ls -la target || true
          echo "Listing expected bench artifacts (release/deps):"; ls -la "$CARGO_TARGET_DIR/release/deps" || true
          # Force instrumentation mode (no systemd-run, no polkit prompt)
          codspeed run \
            --mode=instrumentation \
            --token "${CODSPEED_TOKEN:-}" \
            --working-directory "${GITHUB_WORKSPACE}" \
            -- 'cargo codspeed run --profile bench'
