name: Continuous Benchmarking with Bencher

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

# Grant the minimum permissions required for the action to create PR comments.
# By default GITHUB_TOKEN is read-only for many scopes; explicitly allow write
# access to issues/pull-requests so Bencher can post comments on PRs.
# Note: For runs triggered by forks, secrets (including GITHUB_TOKEN) are not
# available and commenting will fail — this is a GitHub security restriction.
#
# https://bencher.dev/docs/explanation/bencher-run/#--github-actions-github_token
permissions:
  pull-requests: write
  checks: write

# Ensure only one run per branch/PR at a time. If new commits are pushed,
# older benchmark jobs will be automatically canceled.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  benchmark_with_bencher:
    # Only run this job for non-draft pull requests. We still want the job to run
    # for pushes and manual `workflow_dispatch` events. GitHub exposes
    # `github.event.pull_request.draft` (true for draft PRs), so require it to
    # be false when the event is a pull_request.
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    name: Run Rust workspace benchmarks

    # runs-on: ubuntu-latest
    runs-on: [self-hosted, macOS, ARM64]
    env:
      BENCHER_PROJECT: llkv
      # The Bencher adapter to use for the benchmark run.
      # https://bencher.dev/docs/explanation/adapters
      BENCHER_ADAPTER: rust_criterion
      BENCHER_API_TOKEN: ${{ secrets.BENCHER_API_TOKEN }}
      # Use a workspace-local CARGO_HOME to avoid writing into the runner's
      # $HOME/.cargo. This keeps installs and registry/git cache inside the
      # repository workspace (useful for self-hosted runners).
      CARGO_HOME: "${{ github.workspace }}/.cargo"
      # The branch name to report to Bencher. For pull_request events use the
      # head ref, otherwise use the ref name (branch on push).
      BENCHER_BRANCH: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
      # A simple testbed identifier. You can change this to better describe the
      # runner (eg: self-hosted-mac-arm64, github-ubuntu-latest, etc.).
      BENCHER_TESTBED: ci
      # Optional: set threshold flags here to create Thresholds/Models when the
      # bench run executes. Leave empty to skip creating/updating Thresholds.
      # https://bencher.dev/docs/explanation/thresholds/
      THRESHOLD_FLAGS: --threshold-measure latency --threshold-test t_test --threshold-max-sample-size 64 --threshold-upper-boundary 0.99 --thresholds-reset --err
      # Configure sccache to use local disk storage for self-hosted runners.
      # This persists the cache across workflow runs on the same runner.
      SCCACHE_DIR: "${{ github.workspace }}/.sccache"
      SCCACHE_CACHE_SIZE: "5G"
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry and build target
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cargo/registry
            ${{ github.workspace }}/.cargo/git
            ${{ github.workspace }}/.cargo/bin
            target
            ./.sccache
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Install sccache binary if not already present on the self-hosted runner
      - name: Install sccache
        run: |
          if ! command -v sccache &> /dev/null; then
            echo "Installing sccache..."
            cargo install sccache --locked
          else
            echo "sccache already installed: $(sccache --version)"
          fi

      # Create sccache directory and start sccache server
      - name: Configure sccache
        run: |
          mkdir -p "$SCCACHE_DIR"
          sccache --start-server || true
          sccache --show-stats

      - uses: bencherdev/bencher@main

      - name: Run benches via Bencher (in-repo PRs)
        env:
          RUSTC_WRAPPER: sccache
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false }}
        # Note: The `--github-actions` flag will allow Bencher to create a PR
        # comment/check using the provided GITHUB_TOKEN. This step passes the
        # branch/testbed and any optional threshold flags.
        run: |
          bencher run \
            --adapter ${BENCHER_ADAPTER} \
            --project "${BENCHER_PROJECT}" \
            --branch "${BENCHER_BRANCH}" \
            --testbed "${BENCHER_TESTBED}" \
            ${THRESHOLD_FLAGS} \
            --github-actions "${{ secrets.GITHUB_TOKEN }}" \
            "cargo bench"

      - name: Run benches via Bencher (pushes / forked PRs)
        env:
          RUSTC_WRAPPER: sccache
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == true }}
        # For forked PRs secrets are not available — this runs Bencher locally
        # (no GitHub comment). It still accepts the same branch/testbed and
        # threshold flags, but without uploading results if no API token is set.
        run: |
          bencher run \
            --adapter ${BENCHER_ADAPTER} \
            --project "${BENCHER_PROJECT}" \
            --branch "${BENCHER_BRANCH}" \
            --testbed "${BENCHER_TESTBED}" \
            ${THRESHOLD_FLAGS} \
            "cargo bench"

      # Show final sccache statistics after benchmark completion
      - name: Display sccache stats
        if: always()
        run: |
          echo "=== Final sccache statistics ==="
          sccache --show-stats
          echo ""
          echo "=== sccache cache directory size ==="
          du -sh "$SCCACHE_DIR" 2>/dev/null || echo "Cache directory not found"

      # Stop sccache server to clean up
      - name: Stop sccache
        if: always()
        run: sccache --stop-server || true
