name: rust-tests

on:
  push:
    branches: [main, dev]
    tags: ["v*"]
  pull_request:
    branches: [main, dev]

# Ensure only one run per branch/PR at a time. If new commits are pushed,
# older jobs will be automatically canceled.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: test
    runs-on: [self-hosted, macOS, ARM64]
    env:
      SCCACHE_DIR: "${{ github.workspace }}/.sccache"
      SCCACHE_CACHE_SIZE: "5G"
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Ensure sccache directory
        shell: bash
        run: mkdir -p "$SCCACHE_DIR"

      - name: Setup sccache (best-effort)
        # On self-hosted runners you may already have sccache installed/configured.
        # This action is a no-op if not needed, but it's kept for parity with matrix job.
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Test
        run: cargo test --workspace --all-features --verbose --lib --bins --tests --examples -- --include-ignored

      - name: Display sccache stats
        if: always()
        shell: bash
        run: |
          echo "=== sccache statistics (self-hosted) ==="
          sccache --show-stats || true

# TODO: Implement
# Runs the Miri interpreter across all OS targets to detect undefined behavior in unsafe code
#   miri:
#     name: Miri (OS=${{ matrix.os }})
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Install nightly toolchain with Miri
#         uses: dtolnay/rust-toolchain@nightly
#         with:
#           components: miri

# TODO: To effectively use this a custom test-only, Miri-friendly pager may need to be created
# and feature gated to only use `EntryHandle` (mmap-backed). This should be modified to test
# integration tests as well, not only `--lib` tests.
#   - name: Run Miri tests
#     # Miri cannot emulate the OS-backed mmap calls used by our integration tests, so
#     # we limit the run to library tests (unit tests) for now.
#     run: cargo miri test -p llkv-column-map --lib
