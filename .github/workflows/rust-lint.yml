name: rust-lint

on: [pull_request]

# Ensure only one run per branch/PR at a time. If new commits are pushed,
# older jobs will be automatically canceled.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - name: Capture rustc commit hash
        id: rustc
        shell: bash
        run: |
          set -euo pipefail
          rustc -Vv
          echo "hash=$(rustc -Vv | sed -n 's/^commit-hash: //p')" >> "$GITHUB_OUTPUT"

      # Added caching step to speed up dependency builds.
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rustc.outputs.hash }}-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.flags }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ steps.rustc.outputs.hash }}-${{ hashFiles('**/Cargo.lock') }}-

      # Note: This is a workaround for an issue that just started appearing in lint checks
      # and I'm not yet sure if it's due to GitHub Actions having updated something behind
      # the scenes:
      # error: 'cargo-fmt' is not installed for the toolchain 'stable-x86_64-unknown-linux-gnu'
      - name: Install rustfmt
        run: rustup component add rustfmt clippy

      - name: Install cargo-binstall
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v cargo-binstall >/dev/null 2>&1; then
            curl -sSfL https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          fi

      - name: Install tools
        shell: bash
        run: |
          set -euo pipefail
          cargo binstall --no-confirm --no-symlinks --force cargo-deny cargo-audit \
            || cargo install --locked --force cargo-deny cargo-audit

      # Check formatting across the entire workspace
      - name: Check formatting
        run: cargo fmt --all -- --check

      # Run Clippy with all targets and features across workspace
      - name: Run Clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      # Fail if any documentation warnings occur
      - name: Check documentation
        run: RUSTDOCFLAGS="-D warnings" cargo doc --workspace --no-deps --document-private-items

      # Security: cargo-deny across workspace
      - name: Run cargo-deny
        run: cargo deny check # Note: Apparently `-- --workspace` is not valid here

      # Security: cargo-audit on root Cargo.lock
      - name: Run cargo-audit
        run: cargo audit
